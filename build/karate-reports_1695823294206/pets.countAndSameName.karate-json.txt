{"failedCount":1,"prefixedPath":"classpath:pets\/countAndSameName.feature","packageQualifiedName":"pets.countAndSameName","loopIndex":-1,"relativePath":"pets\/countAndSameName.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":270493500,"millis":270.4935,"status":"passed"},"step":{"line":10,"prefix":"*","index":0,"text":"def nombres = read ('.\/json\/pets.json')"}},{"result":{"nanos":9825900,"millis":9.8259,"status":"passed"},"step":{"line":11,"prefix":"*","index":1,"text":"def elementosFiltrados = nombres.name"}},{"result":{"nanos":1217900,"millis":1.2179,"status":"passed"},"step":{"comments":["# Esto es opcional si necesitas filtar solo los nombres del json,","# como el json de ejemplo solo trae nombres por eso esta linea no es necesaria , y donde diga elementosFiltrados lo reemplazas por filtrarSoloNombres","#* def filtrarSoloNombres = karate.filter(nombres.value.nombre, item => item == item)"],"line":15,"prefix":"*","index":2,"text":"def contador = {}"}},{"result":{"nanos":674900,"millis":0.6749,"status":"passed"},"step":{"line":16,"prefix":"*","index":3,"text":"def resultado = {}"}},{"result":{"nanos":66865100,"errorMessage":"js failed:\n>>>>\n01:  for (var i = 0; i < elementosFiltrados.length; i++) {  var nombre = elementosFiltrados[i];  if (!contador[nombre]) {  contador[nombre] = 1;  } else {  contador[nombre]++;  }  }  resultado = contador;\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Cannot read property \"length\" from null\n- <js>.:program(Unnamed:1)\n\nclasspath:pets\/countAndSameName.feature:17","millis":66.8651,"status":"failed"},"step":{"line":17,"prefix":"*","index":4,"text":"eval  for (var i = 0; i < elementosFiltrados.length; i++) {  var nombre = elementosFiltrados[i];  if (!contador[nombre]) {  contador[nombre] = 1;  } else {  contador[nombre]++;  }  }  resultado = contador;"},"stepLog":"14:09:51.086 classpath:pets\/countAndSameName.feature:17\n* eval  for (var i = 0; i < elementosFiltrados.length; i++) {  var nombre = elementosFiltrados[i];  if (!contador[nombre]) {  contador[nombre] = 1;  } else {  contador[nombre]++;  }  }  resultado = contador;\njs failed:\n>>>>\n01:  for (var i = 0; i < elementosFiltrados.length; i++) {  var nombre = elementosFiltrados[i];  if (!contador[nombre]) {  contador[nombre] = 1;  } else {  contador[nombre]++;  }  }  resultado = contador;\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Cannot read property \"length\" from null\n- <js>.:program(Unnamed:1)\n\nclasspath:pets\/countAndSameName.feature:17\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":18,"prefix":"*","index":5,"text":"print \"Conteo de nombres:\", resultado"}}],"line":9,"description":"","durationMillis":349.0773,"failed":true,"error":"js failed:\n>>>>\n01:  for (var i = 0; i < elementosFiltrados.length; i++) {  var nombre = elementosFiltrados[i];  if (!contador[nombre]) {  contador[nombre] = 1;  } else {  contador[nombre]++;  }  }  resultado = contador;\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Cannot read property \"length\" from null\n- <js>.:program(Unnamed:1)\n\nclasspath:pets\/countAndSameName.feature:17","executorName":"Test worker","name":"Contar mascotas con el mismo nombre opcion 2","startTime":1695816590711,"refId":"[1:9]","endTime":1695816591086,"exampleIndex":-1}],"callDepth":0,"name":"Contar mascotas con el mismo nombre","description":"","resultDate":"2023-09-27 02:09:51 p.Â m.","durationMillis":349.0773,"passedCount":0}